#!/reg/g/psdm/sw/conda/inst/miniconda2-prod-rhel7/envs/ana-1.3.9/bin/python
import argparse
import analysisFunctions
from pylab import *
import psana
import os

def generateDetectorDictionary(configFileName):
	print("reading config file")
	f = open(configFileName,'r')
	myDetectorObjectDictionary = {}
	myDetectorObjectDictionary['analyzer'] = {}
	myDetectorObjectDictionary['summarizer'] = {}				
	print("Generating analyzer summarizer and detector objects")
	
	for thisDetectorConfig in f:
		if('#'  not in thisDetectorConfig):
			myParsedString = thisDetectorConfig.split(',')
			print(thisDetectorConfig)
			print("found detector object named "+myParsedString[3])
			myDetectorObjectDictionary[myParsedString[3]] = psana.Detector(myParsedString[0])
			myDetectorObjectDictionary['analyzer'][myParsedString[3]] = analysisFunctions.__dict__[myParsedString[4]]
			if(myParsedString[5]!='None'):		
				myDetectorObjectDictionary['summarizer'][myParsedString[3]] = analysisFunctions.__dict__[myParsedString[5]]

		else:
			continue
		
	return myDetectorObjectDictionary

def initializeDataDictionaries(myDetectorObjectDictionary):

	myDataDictionary = {}
	summaryDataDictionary={}
	for i in myDetectorObjectDictionary['summarizer'].keys():
		summaryDataDictionary[i] = 0

	return[myDataDictionary,summaryDataDictionary]
def renameSummaryKeys(myDict):
	for i in myDict.keys():
		myDict[i+'Summarized'] = myDict.pop(i)

def main(exp, run, configFileName,h5FileName,testSample):
	
	print("entering main function")

	try:
		print("removing file")
		os.system("rm "+h5FileName+".h5")
	except:
		print("nothing to remove")
	
	print("loading experiment")
	experimentNameAndRun = "exp=%s:run=%d"%(exp, run)
	myDataSource = psana.MPIDataSource(experimentNameAndRun+":smd")

	print("defining small data")
	smldata = myDataSource.small_data(h5FileName+'.h5')

	print("loading detector object dictionary")
	myDetectorObjectDictionary = generateDetectorDictionary(configFileName)
	print("detector object dictionary loaded")
	
	print("initializing data dictionaries")
	myDataDictionary,summaryDataDictionary = initializeDataDictionaries(myDetectorObjectDictionary)
	
	print("iterating over enumerated events")
	myEnumeratedEvents = enumerate(myDataSource.events())
	for eventNumber,thisEvent in myEnumeratedEvents:
		if(eventNumber %1000 == 1):
			print("iterating over enumerated events.  Event number = "+str(eventNumber))
		if(testSample):
			if(eventNumber > 200):
				break
		
		for i in myDetectorObjectDictionary['analyzer'].keys():
			myDataDictionary[i] = myDetectorObjectDictionary['analyzer'][i](myDetectorObjectDictionary[i],thisEvent)
		for i in myDetectorObjectDictionary['summarizer'].keys():
				summaryDataDictionary[i] = myDetectorObjectDictionary['summarizer'][i](myDetectorObjectDictionary[i],thisEvent,summaryDataDictionary[i])

		smldata.event(myDataDictionary)
		
	

	print("finished looping over events")
	print("saving small data")
	#print(summaryDataDictionary)
	renameSummaryKeys(summaryDataDictionary)
	smldata.save(summaryDataDictionary)
	#smldata.save()
	print("small data file saved")
	smldata.close()
	print("small data file closed")

	return

if __name__ == '__main__':
	
	print("parsing arguments")
	myParser = argparse.ArgumentParser(description='Abstracts data analysis into user functions')
		
	myParser.add_argument('-e','--exp', help='the experiment name')
	myParser.add_argument('-r','--run',type=int,help='the run number to use when running offline')
	myParser.add_argument('-c','--configFile',help='the config file to write to')
	myParser.add_argument('-hd5','--hd5File',help='the small data file to write to')
	myParser.add_argument('-t','--testSample',action='store_true',help='only take a small set of data for testing')

	myArguments = myParser.parse_args()
	print("arguments parsed")

	main(myArguments.exp,myArguments.run,myArguments.configFile,myArguments.hd5File,myArguments.testSample)
