from psana import *
import time

startTime = time.time()
 
dsource = MPIDataSource('exp=sxr12416:run=5')
#dsource = DataSource('exp=sxr12416:run=5')
#cspaddet = Detector('cspad')
analogInDetector  = Detector('SXR-AIN-01')
gmdDetector  = Detector('GMD')
FEEGasDetEnergyDetector  = Detector('FEEGasDetEnergy')
#det  = Detector('SXR-AIN-01')
smldata = dsource.small_data('run5.h5',gather_interval=100)
 
partial_run_sum = None
for nevt,evt in enumerate(dsource.events()):
   
   #calib = cspaddet.calib(evt)
   #if calib is None: continue
   #cspad_sum = calib.sum()      # number
   #cspad_roi = calib[0][0][3:5] # array
   #if partial_run_sum is None:
   #   partial_run_sum = cspad_roi
   #else:
   #   partial_run_sum += cspad_roi
 
   # save per-event data
  
   if(nevt%100==0):
	print ("time " +str((time.time()-startTime)/60.0))


   gmd = gmdDetector.get(evt)
   
   FEEGasDetEnergy = FEEGasDetEnergyDetector.get(evt)

   ain  = analogInDetector.get(evt)

   if ain is not None:
	print 'found ain'
	voltages = ain.channelVoltages()
    #   print voltages,type(voltages)

  	smldata.event(voltages=voltages)

   if FEEGasDetEnergy is not None:
	print 'found FEEGasDetEnergy'
	voltages = FEEGasDetEnergy.channelVoltages()
    #   print voltages,type(voltages)

  	smldata.event(voltages=voltages)

   if gmd is not None:
	print 'found gmd'
	voltages = gmd.channelVoltages()
    #   print voltages,type(voltages)

  	smldata.event(voltages=voltages)

   """
   if ain is None:
	print 'did not find ain'
	continue
   voltages = ain.channelVoltages()
   print voltages,type(voltages)

   smldata.event(voltages=voltages) """
   

   #smldata.event(cspad_sum=cspad_sum,cspad_roi=cspad_roi)


   if nevt>20: break
 
# save HDF5 file, including summary data
smldata.save()
